use.miden::note
use.miden::contracts::wallets::basic->wallet
use.std::sys
use.miden::account
use.std::math::u64
use.miden::tx

# CONSTANTS
# =================================================================================================

const.PUBLIC_NOTE=1
const.EXECUTION_HINT_ALWAYS=1
const.FACTOR=0x000186A0 # 1e5
const.MAX_U32=0x0000000100000000

# Memory Addresses
# =================================================================================================

# Memory Addresses for Price Calculation Procedure
const.AMT_TOKENS_A=0x0064
const.AMT_TOKENS_B=0x0065
const.AMT_TOKENS_B_IN=0x0066
const.RATIO=0x0067

# Memory Addresses for SWAPp Script

# SWAPp Note Inputs
const.REQUESTED_ASSET=0x0000
const.PAYBACK_TAG=0x0001
const.SWAP_COUNT=0x0002
const.SWAP_CREATOR_ID=0x0003

# SWAPp Script Hash
const.SWAPP_SCRIPT_HASH=0x0004
const.P2ID_SCRIPT_HASH=0x0005

# temp variables
const.OFFERED_ASSET=0x0006
const.TOKEN_A_ID=0x0007
const.TOKEN_B_ID=0x0008
const.TOKEN_A_AMT=0x0009
const.TOKEN_B_AMT=0x000A
const.TOKEN_B_AMT_IN=0x000B
const.TOKEN_A_AMT_OUT=0x000C
const.IS_PARTIAL_FILL=0x000D

# MISC
const.SWAP_SERIAL_NUM=0x000E
const.P2ID_SERIAL_NUM=0x000F
const.P2ID_OUTPUT_RECIPIENT=0x0010

# ERRORS
# =================================================================================================

# SWAP script expects exactly 9 note inputs
const.ERR_SWAP_WRONG_NUMBER_OF_INPUTS=0x00020007

# SWAP script requires exactly one note asset
const.ERR_SWAP_WRONG_NUMBER_OF_ASSETS=0x00020008

# SWAP amount must not exceed 184467440694145
const.ERR_INVALID_SWAP_AMOUNT=0x00020009

# SWAPp amount must not be 0
const.ERR_INVALID_SWAP_AMOUT_ZERO=0x0002000A

# PRICE CALCULATION
# =================================================================================================

#! Returns the amount of tokens_a out given an amount of tokens_b
#!
#! Inputs: [tokens_a, tokens_b, tokens_b_in]
#! Outputs: [tokens_a_out]
#!
proc.calculate_tokens_a_for_b
    mem_store.AMT_TOKENS_A
    mem_store.AMT_TOKENS_B
    mem_store.AMT_TOKENS_B_IN

    mem_load.AMT_TOKENS_B mem_load.AMT_TOKENS_A

    gt
    if.true
        mem_load.AMT_TOKENS_B
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.AMT_TOKENS_A
        u32split

        exec.u64::div
        push.MAX_U32 mul add

        mem_store.RATIO

        mem_load.AMT_TOKENS_B_IN
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.RATIO
        u32split

        exec.u64::div
        push.MAX_U32 mul add

    else
        mem_load.AMT_TOKENS_A
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.AMT_TOKENS_B
        u32split

        exec.u64::div

        mem_load.AMT_TOKENS_B_IN
        u32split

        exec.u64::wrapping_mul

        push.FACTOR
        u32split

        exec.u64::div
        push.MAX_U32 mul add

    end
end

# HASHING PROCEDURES
# =================================================================================================

#! Returns the P2ID RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and account_id
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, account_id]
#! Outputs: [P2ID_RECIPIENT]
#!
proc.build_p2id_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_HASH, account_id]

    swapw hmerge
    # => [SERIAL_SCRIPT_HASH, account_id]

    swapw swap.3 padw hmerge
    # => [INPUT_HASH, SERIAL_SCRIPT_HASH]

    hmerge
    # => [P2ID_RECIPIENT]
end

#! Returns the NOTE RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and INPUT_HASH
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, INPUT_HASH]
#! Outputs: [P2ID_RECIPIENT]
#!
proc.build_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_HASH, INPUT_HASH]

    swapw hmerge
    # => [SERIAL_SCRIPT_HASH, INPUT_HASH]

    swapw hmerge
    # => [P2ID_RECIPIENT]
end

# SWAP COUNT INCREMENT PROCEDURE
# =================================================================================================

#! Returns the incremented SWAP count value
#!
#! Inputs: []
#! Outputs: []
#!
proc.increment_swap_count
    mem_load.SWAP_COUNT
    push.1
    add
    mem_store.SWAP_COUNT
end

# input: [SERIAL_NUM, swap_count, ...]
# ouput: [P2ID_SERIAL_NUM, ...]
proc.get_p2id_serial_num
    swapw
    hmerge
end

#! Returns if the currently consuming account is the creator of the note
#!
#! Inputs: []
#! Outputs: [is_creator]
#!
proc.is_consumer_is_creator

    push.0 exec.note::get_inputs drop drop
    # => []

    exec.account::get_id
    # => [consuming_account_id]

    mem_load.3
    # => [creator_account_id]

    eq
    # => [is_creator]

end

#! Sends Assets in Note to Consuming Account
#!
#! Inputs: []
#! Outputs: []
#!
proc.handle_reclaim

    push.0 exec.note::get_assets

    mem_loadw.0

    call.wallet::receive_asset

    dropw
end

# Partially Fillable Swap Script (SWAPp)
# =================================================================================================
#
# Partially Fillable Swap Script (SWAPp): adds an asset from the note into consumers account and
# creates a note consumable by note issuer containing requested ASSET.
#
# If the consuming account does not have sufficient liquidity to completely
# fill the amount of the SWAPp creator's requested asset, then the SWAPp note:
#  1) Computes the ratio of token_a to token_b, where token_a is the offered asset,
#     and where token_b is the requested asset
#  2) Calculates the amount of token_a to send to the consumer based on the the
#     amount of token_b sent via P2ID to the creator
#  3) Outputs a new SWAPp note with the remaining liquidity of token_a, and the updated
#     amount of token_b
#
# If the consuming account completely fills the amount requested by the SWAPp creator,
# only a single P2ID note is outputted.
#
# Definitions:
# 1) the offered asset is referred to as token_a,
# 2) the requested asset is referred to as token_b,
# 3) token_b_in is the amount of token_b sent to the SWAPp creator via P2ID from the consuming account
# 4) token_a_out is the amount of token_a sent to the consuming account
#

# => [token_b_amt_in]
proc.execute_SWAPp

    # if user does not supply amount token B in via note args
    # then we use the amount of tokens B in their wallet
    mem_store.TOKEN_B_AMT_IN
    # => []

    exec.note::get_assets assert.err=ERR_SWAP_WRONG_NUMBER_OF_ASSETS
    # => [ptr]

    mem_loadw
    # => [OFFERED_ASSET]

    # store token_a_id and offered asset
    dup mem_store.TOKEN_A_ID mem_storew.OFFERED_ASSET
    # => []

    # store token_a_AMT to mem
    drop drop drop mem_store.TOKEN_A_AMT
    # => []

    # store note inputs into memory starting at address 0
    push.0 exec.note::get_inputs
    # => [num_inputs, inputs_ptr]

    # make sure the number of inputs is N
    eq.13 assert.err=ERR_SWAP_WRONG_NUMBER_OF_INPUTS
    # => [inputs_ptr]

    mem_loadw.REQUESTED_ASSET
    # => [REQUESTED_ASSET]

    mem_store.TOKEN_B_ID
    # => [0, 0, TOKEN_B_AMT]

    # store token_b_AMT to mem
    drop drop mem_store.TOKEN_B_AMT
    # => []

    # Users can supply the amount of token B they would like to sell
    # via note args. If they don't supply TOKEN_B_AMT_IN via note args
    # by default we read the balance of token B in the consuming account

    # get token_b_AMT_IN, if supplied via note args
    mem_load.TOKEN_B_AMT_IN push.0
    eq
    # => [is_TOKEN_B_AMT_IN_USER_BAL]

    # if amount to swap is user wallet balance
    if.true
        mem_load.TOKEN_B_ID call.account::get_balance
        # => [token_b_AMT_IN]

        # token_b_AMT_IN must not be 0
        dup push.0 neq assert.err=ERR_INVALID_SWAP_AMOUT_ZERO
        # => [token_b_AMT_IN]

        mem_store.TOKEN_B_AMT_IN
        # => []
    else
        # no need to verify that amount tokens b via note args is
        # valid bc if it isn't call.wallet::send_asset will fail
    end
    # = []

    mem_load.TOKEN_B_AMT_IN
    # => [token_b_AMT_IN]

    mem_load.TOKEN_B_AMT mem_load.TOKEN_A_AMT
    # => [token_a_AMT, token_b_AMT, token_b_AMT_IN]

    exec.calculate_tokens_a_for_b
    # => [token_a_AMT_out]

    # store token_a_AMT_out in mem
    dup mem_store.TOKEN_A_AMT_OUT
    # => [token_a_AMT_out]

    mem_load.TOKEN_A_AMT
    # => [token_a_AMT, token_a_AMT_out]

    lt
    # => [is_lt]

    # if amount_out < amount_a
    if.true
        # partial order fill
        # mem_load.TOKEN_A_AMT_OUT
        push.1 mem_store.IS_PARTIAL_FILL
    else
        # complete order fill
        # mem_load.TOKEN_A_AMT
        push.0 mem_store.IS_PARTIAL_FILL
    end
    # => []

    # 1) send token_b_in amt in to creator
    # 2) send token_a_out amt to consumer

    # If Partial Fill:
    # 3) create SWAPp' and calculate token_a' & token_b'
    # 4) add token_a' and token_b' to SWAPp'

    mem_load.SWAP_CREATOR_ID
    # => [creator_id]

    padw mem_loadw.P2ID_SCRIPT_HASH
    # => [P2ID_SCRIPT_HASH, creator_id]

    exec.increment_swap_count
    # => [P2ID_SCRIPT_HASH, creator_id]

    padw mem_loadw.SWAP_COUNT
    # => [SWAP_COUNT, P2ID_SCRIPT_HASH, creator_id]

    exec.note::get_serial_number
    # => [SWAP_SERIAL_NUM, SWAP_COUNT, P2ID_SCRIPT_HASH, creator_id]

    exec.get_p2id_serial_num
    # => [P2ID_SERIAL_NUM, P2ID_SCRIPT_HASH, creator_id]

    exec.build_p2id_recipient_hash
    # => [P2ID_RECIPIENT]

    push.EXECUTION_HINT_ALWAYS
    # => [execution_hint_always, P2ID_RECIPIENT]

    push.PUBLIC_NOTE
    # => [public_note, execution_hint_always, P2ID_RECIPIENT]

    push.0 # @dev aux for p2id output note
    # => [aux, public_note, execution_hint_always, P2ID_RECIPIENT]

    push.3863019520
    # => [tag, aux, public_note, execution_hint_always, P2ID_RECIPIENT]

    mem_load.TOKEN_B_AMT_IN push.0.0 mem_load.TOKEN_B_ID
    # => [ASSET, tag, aux, public_note, execution_hint_always, P2ID_RECIPIENT]

    # => [ASSET, tag, aux, note_type, execution_hint, RECIPIENT]
    call.wallet::send_asset
    # => [0, ASSET] @dev ?

    drop dropw
    # => []

    # 2) send token A out amt to consumer
    mem_load.TOKEN_A_AMT_OUT push.0.0 mem_load.TOKEN_A_ID
    # => [token_a_AMT_OUT, 0, 0, token_a_id]

    call.wallet::receive_asset
    # => []

    # check if partial fill
    mem_load.IS_PARTIAL_FILL
    # => [is_partial_fill]

    if.true
        mem_load.TOKEN_B_AMT mem_load.TOKEN_B_AMT_IN sub
        # => [token_b_AMT']

        push.0.0 mem_load.TOKEN_B_ID
        # => [REQUESTED_ASSET_REMAINING]

        # overwrite memory!
        mem_storew.REQUESTED_ASSET dropw
        # => []

        push.16.0
        # => [inputs, ptr]

        exec.note::compute_inputs_hash
        # => [INPUTS_HASH]

        padw mem_loadw.SWAPP_SCRIPT_HASH
        # => [SCRIPT_HASH, INPUTS_HASH]

        exec.note::get_serial_number
        # => [SERIAL_NUM, SCRIPT_HASH, INPUTS_HASH]

        exec.tx::build_recipient_hash
        # => [RECIPIENT_SWAPP]

        push.EXECUTION_HINT_ALWAYS
        # => [execution_hint_always, SWAPp_RECIPIENT]

        push.PUBLIC_NOTE
        # => [public_note, execution_hint_always, SWAPp_RECIPIENT]

        push.0 # @dev empty aux
        # => [aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

        mem_load.PAYBACK_TAG
        # => [aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

        mem_load.TOKEN_A_AMT mem_load.TOKEN_A_AMT_OUT sub
        # => [token_a_amt', aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

        push.0.0 mem_load.TOKEN_A_ID
        # => [ASSET, payback_tag, aux, note_type, SWAPp_RECIPIENT]

        dupw call.wallet::receive_asset dropw
        # => [ASSET, payback_tag, aux, note_type, SWAPp_RECIPIENT]

        # SWAPp' creation
        call.wallet::send_asset
        # => [note_idx, ASSET]

        drop dropw
        # => []
    else
        # do not output SWAPp'
        # P2ID already created
    end

    # clean stack
    exec.sys::truncate_stack
end

begin
    # => [SWAPp_SCRIPT_HASH]

    mem_storew.SWAPP_SCRIPT_HASH dropw
    # => []

    push.1668143385662437433.10767920840476013014.17141854971706030398.16685164387741191399
    mem_storew.P2ID_SCRIPT_HASH dropw
    # => []

    exec.is_consumer_is_creator
    # => [is_creator]

    if.true
        exec.handle_reclaim
    else
        exec.execute_SWAPp
    end

end
