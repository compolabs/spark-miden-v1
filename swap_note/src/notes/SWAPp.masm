use.miden::note
use.miden::contracts::wallets::basic->wallet
use.miden::tx
use.miden::account
use.std::sys
use.std::crypto::hashes::native
use.std::math::u64

# CONSTANTS
# =================================================================================================

const.OFFCHAIN_NOTE=2
const.FACTOR=0x000186A0 # 1e5
const.MAX_U32=0x0000000100000000

# Memory Addresses
# =================================================================================================

# Memory Addresses for Price Calculation Procedure
const.AMT_TOKENS_A=0x0064
const.AMT_TOKENS_B=0x0065
const.AMT_TOKENS_B_IN=0x0066
const.RATIO=0x0067

# Memory Addresses for SWAPp Script

# SWAPp Note Inputs
const.PAYBACK_RECIPIENT=0x0000
const.REQUESTED_ASSET=0x0001
const.PAYBACK_TAG=0x0002
const.SWAP_COUNT=0x0003
const.SWAP_CREATOR_ID=0x0004

# SWAPp Script Hash
const.SWAPP_SCRIPT_HASH=0x0006
const.P2ID_SCRIPT_HASH=0x0007

# temp variables
const.OFFERED_ASSET=0x0008
const.TOKEN_A_ID=0x0009
const.TOKEN_B_ID=0x000A
const.TOKEN_A_AMT=0x000B
const.TOKEN_B_AMT=0x000C
const.TOKEN_B_AMT_IN=0x000D
const.TOKEN_A_AMT_OUT=0x000E
const.IS_PARTIAL_FILL=0x000F

# MISC
const.SWAP_SERIAL_NUM=0x0010
const.P2ID_SERIAL_NUM=0x0011
const.P2ID_OUTPUT_RECIPIENT=0x0012

# ERRORS
# =================================================================================================

# SWAP script expects exactly 9 note inputs
const.ERR_SWAP_WRONG_NUMBER_OF_INPUTS=0x00020007

# SWAP script requires exactly one note asset
const.ERR_SWAP_WRONG_NUMBER_OF_ASSETS=0x00020008

# SWAP amount must not exceed 184467440694145
const.ERR_INVALID_SWAP_AMOUNT=0x00020009

# SWAPp amount must not be 0
const.ERR_INVALID_SWAP_AMOUT_ZERO=0x0002000A

# PRICE CALCULATION
# =================================================================================================

#! Returns the amount of tokens_a out given an amount of tokens_b
#!
#! Inputs: [tokens_a, tokens_b, tokens_b_in]
#! Outputs: [tokens_a_out]
#!
proc.calculate_tokens_a_for_b
    mem_store.AMT_TOKENS_A
    mem_store.AMT_TOKENS_B
    mem_store.AMT_TOKENS_B_IN

    mem_load.AMT_TOKENS_B mem_load.AMT_TOKENS_A

    gt
    if.true
        mem_load.AMT_TOKENS_B
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.AMT_TOKENS_A
        u32split

        exec.u64::div
        push.MAX_U32 mul add

        mem_store.RATIO

        mem_load.AMT_TOKENS_B_IN
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.RATIO
        u32split

        exec.u64::div
        push.MAX_U32 mul add

    else
        mem_load.AMT_TOKENS_A
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.AMT_TOKENS_B
        u32split

        exec.u64::div

        mem_load.AMT_TOKENS_B_IN
        u32split

        exec.u64::wrapping_mul

        push.FACTOR
        u32split

        exec.u64::div
        push.MAX_U32 mul add

    end
end

# SWAP COUNT INCREMENT PROCEDURE
# =================================================================================================

#! Returns the incremented SWAP count value
#!
#! Inputs: []
#! Outputs: []
#!
proc.increment_swap_count
    mem_load.SWAP_COUNT
    push.1
    add
    mem_store.SWAP_COUNT
end

# HASHING PROCEDURES
# =================================================================================================

#! Computs the note inputs commitment for up to 16 inputs
#!
#! Inputs: [INPUTS_4, INPUTS_3, INPUTS_2, INPUTS_1]
#! Outputs: [INPUTS_HASH]
#!
proc.get_note_inputs_commitment

    # Initialize the capacity portion of the hasher state.
    # Absorb the first 8 values into the hasher state.
    swapdw padw movupw.2 movupw.2
    # => [8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0]

    # Execute the RPO permutation.
    hperm
    # => Permuted state [R2, R1, C]

    # Drop the two capacity elements to absorb the 9th element.
    dropw dropw
    # => [R2, R1]

    # Absorb the 9th element and apply padding.
    movupw.2 movupw.2
    # => [0, 0, 0, 0, 0, 0, 0, 9, R2, R1]

    # Execute the RPO permutation.
    hperm
    # => Permuted state [R2, R1, C]

    # Convert the state to the digest.
    exec.native::state_to_digest
    # => [Digest]
end

# @dev debug this
# inputs: [creator_id, SWAP_COUNT, TAG, ASSET_REQUESTED_REMAINING, PAYBACK_RECIPIENT]
# ouputs: [SWAP_RECIPIENT]
proc.get_swap_note_inputs_commitment

    mem_store.84
    mem_storew.83 dropw
    mem_storew.82 dropw
    mem_storew.81 dropw
    mem_storew.80 dropw

    push.17.80

    push.303 debug.stack debug.mem.80.84 drop

    exec.note::compute_inputs_hash

end

# RECLAIM FUNCTIONALITY PROCEDURES
# =================================================================================================

#! Returns the P2ID RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and account_id
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, account_id]
#! Outputs: [P2ID_RECIPIENT]
#!
proc.build_p2id_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_HASH, account_id]

    swapw hmerge
    # => [SERIAL_SCRIPT_HASH, account_id]

    swapw swap.3 padw hmerge
    # => [INPUT_HASH, SERIAL_SCRIPT_HASH]

    hmerge
    # => [P2ID_RECIPIENT]
end

# @DEV TODO assign dedicated memory addresses
# input: [SERIAL_NUM, swap_count, ...]
# ouput: [P2ID_SERIAL_NUM, ...]
proc.get_p2id_serial_num

    mem_storew.40 dropw

    mem_store.41

    push.8.40
    # [ptr, inputs]

    exec.note::compute_inputs_hash
    # => [P2ID_SERIAL_NUM]

end

#! Returns if the currently consuming account is the creator of the note
#!
#! Inputs: []
#! Outputs: [is_creator]
#!
proc.is_consumer_is_creator

    push.0
    # => [SWAP_COUNT]

    exec.note::get_serial_number
    # => [SERIAL_NUM, 0]

    mem_storew.0 mem_storew.SWAP_SERIAL_NUM
    # => [SERIAL_NUM, 0]

    exec.get_p2id_serial_num
    # => [P2ID_SERIAL_NUM]

    mem_storew.P2ID_SERIAL_NUM dropw
    # => []

    exec.account::get_id
    # => [account_id]

    mem_loadw.P2ID_SCRIPT_HASH
    # => [P2ID_SCRIPT_HASH, account_id]

    padw mem_loadw.P2ID_SERIAL_NUM
    # => [P2ID_SERIAL_NUM, P2ID_SCRIPT_HASH, account_id]

    exec.build_p2id_recipient_hash
    # => [P2ID_OG_RECIPIENT]

    # write inputs to mem drop num inputs & ptr
    push.0 exec.note::get_inputs drop drop
    # => [P2ID_OG_RECIPIENT]

    padw mem_loadw.0
    # => [RECIPIENT_mem, P2ID_OG_RECIPIENT]

    eqw
    # => [is_equal, RECIPIENT_mem, P2ID_OG_RECIPIENT]

    swap.8 dropw dropw
    # => [is_creator]
end

#! Sends Assets in Note to Consuming Account
#!
#! Inputs: []
#! Outputs: []
#!
proc.handle_reclaim
    push.0 exec.note::get_assets

    mem_loadw.0

    call.wallet::receive_asset

    dropw
end

# Partially Fillable Swap Script (SWAPp)
# =================================================================================================
#
# Partially Fillable Swap Script (SWAPp): adds an asset from the note into consumers account and
# creates a note consumable by note issuer containing requested ASSET.
#
# If the consuming account does not have sufficient liquidity to completely
# fill the amount of the SWAPp creator's requested asset, then the SWAPp note:
#  1) Computes the ratio of token_a to token_b, where token_a is the offered asset,
#     and where token_b is the requested asset
#  2) Calculates the amount of token_a to send to the consumer based on the the
#     amount of token_b sent via P2ID to the creator
#  3) Outputs a new SWAPp note with the remaining liquidity of token_a, and the updated
#     amount of token_b
#
# If the consuming account completely fills the amount requested by the SWAPp creator,
# only a single P2ID note is outputted.
#
# Definitions:
# 1) the offered asset is referred to as token_a,
# 2) the requested asset is referred to as token_b,
# 3) token_b_in is the amount of token_b sent to the SWAPp creator via P2ID from the consuming account
# 4) token_a_out is the amount of token_a sent to the consuming account
#
# Requires that the consuming account exposes:
#  basic_wallet::receive_asset
#  basic_wallet::send_asset
#  basic_eoa::auth_tx_rpo_falcon512
#
# Inputs: [TOKEN_B_AMT_IN]
# Outputs: []
#
# Note inputs are assumed to be as follows:
# - RECIPIENT
# - ASSET
# - TAG = [tag, 0, 0, 0]
#
# FAILS if:
# - Account vault does not contain the requested asset
# - Adding a fungible asset would result in amount overflow, i.e., the total amount would be
#   greater than 2^63
#!
proc.execute_SWAPp

    # if user does not supply amount token B in via note args
    # then we use the amount of tokens B in their wallet
    mem_store.TOKEN_B_AMT_IN
    # => []

    # store asset into memory at address 3
    exec.note::get_assets assert.err=ERR_SWAP_WRONG_NUMBER_OF_ASSETS
    # => [ptr]

    # load the asset and add it to the account
    mem_loadw
    # => [OFFERED_ASSET]

    # store token_a_id and offered asset
    dup mem_store.TOKEN_A_ID mem_storew.OFFERED_ASSET
    # => []

    # store token_a_AMT to mem addr 8
    drop drop drop mem_store.TOKEN_A_AMT
    # => []

    # store note inputs into memory starting at address 0
    push.0 exec.note::get_inputs
    # => [num_inputs, inputs_ptr]

    debug.mem

    # make sure the number of inputs is N
    eq.17 assert.err=ERR_SWAP_WRONG_NUMBER_OF_INPUTS
    # => [inputs_ptr]

    mem_loadw.REQUESTED_ASSET
    # => [REQUESTED_ASSET]

    # store token_b_id to memory addr 7
    mem_store.TOKEN_B_ID
    # => [0, 0, TOKEN_B_AMT]

    # store token_b_AMT to mem addr 9
    drop drop mem_store.TOKEN_B_AMT
    # => []

    # Users can supply the amount of token B they would like to sell
    # via note args. If they don't supply TOKEN_B_AMT_IN via note args
    # by default we read the balance of token B in the consuming account
    # this is to maintain backwards compatibility with the standard SWAP note

    # get token_b_AMT_IN, if supplied via note args
    mem_load.TOKEN_B_AMT_IN push.0
    eq
    # => [is_TOKEN_B_AMT_IN_USER_BAL]

    # if amount to swap is user wallet balance
    if.true
        mem_load.TOKEN_B_ID call.account::get_balance
        # => [token_b_AMT_IN]

        # token_b_AMT_IN must not be 0
        dup push.0 neq assert.err=ERR_INVALID_SWAP_AMOUT_ZERO
        # => [token_b_AMT_IN]

        mem_store.TOKEN_B_AMT_IN
        # => []
    else
        # no need to verify that amount tokens b via note args is
        # valid bc if it isn't call.wallet::send_asset will fail
    end

    mem_load.TOKEN_B_AMT_IN
    # => [token_b_AMT_IN]

    mem_load.TOKEN_B_AMT mem_load.TOKEN_A_AMT
    # => [token_a_AMT, token_b_AMT, token_b_AMT_IN]

    exec.calculate_tokens_a_for_b
    # => [token_a_AMT_out]

    # store token_a_AMT_out @ mem addr 11
    dup mem_store.TOKEN_A_AMT_OUT
    # => [token_a_AMT_out]

    mem_load.TOKEN_A_AMT
    # => [token_a_AMT, token_a_AMT_out]

    lt
    # => [is_lt]

    # if amount_out < amount_a
    if.true
        # partial order fill
        # mem_load.TOKEN_A_AMT_OUT
        push.1 mem_store.IS_PARTIAL_FILL
    else
        # complete order fill
        # mem_load.TOKEN_A_AMT
        push.0 mem_store.IS_PARTIAL_FILL
    end

    # 1) send token_b_in amt in to creator
    # 2) send token_a_out amt to consumer

    # If Partial Fill:
    # 3) create SWAPp' and calculate token_a' & token_b'
    # 4) add token_a' and token_b' to SWAPp'

    mem_load.SWAP_CREATOR_ID
    # => [creator_id]

    padw mem_loadw.P2ID_SCRIPT_HASH
    # => [P2ID_SCRIPT_HASH, creator_id]

    exec.increment_swap_count
    # => [P2ID_SCRIPT_HASH, creator_id]

    mem_load.SWAP_COUNT
    # => [swap_count, P2ID_SCRIPT_HASH, creator_id]

    padw mem_loadw.SWAP_SERIAL_NUM
    # => [SWAP_SERIAL_NUM, swap_count, P2ID_SCRIPT_HASH, creator_id]

    exec.get_p2id_serial_num
    # => [P2ID_SERIAL_NUM, P2ID_SCRIPT_HASH, creator_id]

    exec.build_p2id_recipient_hash
    # => [P2ID_RECIPIENT]

    # TODO: add aux value
    # 1) send token B amt to creator
    mem_loadw.PAYBACK_RECIPIENT push.OFFCHAIN_NOTE push.0 mem_load.PAYBACK_TAG mem_load.TOKEN_B_AMT_IN push.0.0 mem_load.TOKEN_B_ID
    # => [requested_token_id, 0, 0, token_b_AMT_IN, tag, note_type, aux, P2ID_RECIPIENT]

    # @dev P2ID creation
    call.wallet::send_asset dropw
    # => []

    # 2) send token A out amt to consumer
    mem_load.TOKEN_A_AMT_OUT push.0.0 mem_load.TOKEN_A_ID
    # => [token_a_AMT_OUT, 0, 0, token_a_id]

    call.wallet::receive_asset
    # => []

    # check if partial fill
    mem_load.IS_PARTIAL_FILL
    # => [is_partial_fill]

    if.true

        mem_load.SWAP_CREATOR_ID

        padw mem_loadw.P2ID_SCRIPT_HASH

        mem_load.SWAP_COUNT

        padw mem_loadw.SWAP_SERIAL_NUM

        exec.get_p2id_serial_num

        exec.build_p2id_recipient_hash

        # 3) create SWAPp' and calculate token_a' & token_b'
        # padw mem_loadw.PAYBACK_RECIPIENT
        # => [PAYBACK_RECIPIENT]

        mem_load.TOKEN_B_AMT mem_load.TOKEN_B_AMT_IN sub
        # => [token_b_AMT', PAYBACK_RECIPIENT]

        push.0.0 mem_load.TOKEN_B_ID
        # => [REQUESTED_ASSET_REMAINING, PAYBACK_RECIPIENT]

        padw mem_loadw.PAYBACK_TAG
        # => [payback_tag, ASSET_REQUESTED_REMAINING, PAYBACK_RECIPIENT]

        padw mem_loadw.SWAP_COUNT
        # => [SWAP_COUNT, TAG, ASSET_REQUESTED_REMAINING, PAYBACK_RECIPIENT]

        mem_load.SWAP_CREATOR_ID
        # => [creator_id, SWAP_COUNT, TAG, ASSET_REQUESTED_REMAINING, PAYBACK_RECIPIENT]

        push.111 debug.stack debug.mem drop

        exec.get_swap_note_inputs_commitment

        push.222 debug.stack drop

        # exec.get_note_inputs_commitment
        # => [INPUTS_HASH]

        padw mem_loadw.SWAPP_SCRIPT_HASH
        # => [SCRIPT_HASH, INPUTS_HASH]

        # @dev TODO research SERIAL_NUM computation
        exec.note::get_serial_number
        # => [SERIAL_NUM, SCRIPT_HASH, INPUTS_HASH]

        exec.tx::build_recipient_hash
        # => [RECIPIENT_SWAPP]

        # @dev TODO research aux computation
        push.OFFCHAIN_NOTE push.0 mem_load.PAYBACK_TAG
        # => [payback_tag, aux, note_type, RECIPIENT_SWAPP]

        mem_load.TOKEN_A_AMT mem_load.TOKEN_A_AMT_OUT sub push.0.0 mem_load.TOKEN_A_ID
        # => [ASSET, payback_tag, aux, note_type, RECIPIENT_SWAPP]

        dupw call.wallet::receive_asset dropw
        # => [ASSET, payback_tag, aux, note_type, RECIPIENT_SWAPP]

        # SWAPp' creation
        call.wallet::send_asset
        # => [note_idx]

    else
        # do not output SWAPp'
        # P2ID already created
    end

    # clean stack
    exec.sys::truncate_stack
end

begin
    # STEPS:
    # 1) Check if consuming account is creator account (check if reclaim)

    # If not reclaim
    # 2) Get amt_a, amt_b, and amt_b_in amounts

    # 3) Calculate price ratio:
    # => ratio = amt_a / amt_b

    # 4) Calculate token_a amount out to consumer
    # => amt_a_out = amt_b_in * ratio

    # 5) Calculate token_b amount to creator

    # 6) calculate token a remaining for new SWAPp note
    # => amt_a_remaining = amt_a - amt_a_out

    # 7) calculate updated token b requested amount (input hash)
    # => amt_b_reqeusted_remaining = amt_b - amt_b_in (used in SWAPp)
    # => amt_b_requested_remaining = amt_a_remaining / ratio (same thing, but has precision errors in MASM)

    # 8) verify price ratio is constant within some margin (precision loss depends on fixed point lib precision)
    # => assert_eq(amt_a_remaining / amt_b_requested_remaining, amt_a / amt_b)

    # store SWAPp script hash to mem addr 4 & drop
    mem_storew.SWAPP_SCRIPT_HASH dropw
    # => []

    # store P2ID script hash
    push.10602532918680875325.6675127147439709234.18374149518996115046.17430228962309045350
    mem_storew.P2ID_SCRIPT_HASH dropw
    # => []

    exec.is_consumer_is_creator
    # => [is_creator]

    if.true
        exec.handle_reclaim
    else
        exec.execute_SWAPp
    end

end
