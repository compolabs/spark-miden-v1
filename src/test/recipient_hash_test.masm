
#! Given the hasher state, returns the hash output
#!
#! Input: [C, B, A, ...]
#! Ouptut: [HASH, ...]
#! Where: For the native RPO hasher HASH is B.
#! Cycles: 9
proc.state_to_digest
  # drop the first rate word (4 cycles)
  dropw

  # save the hash result (1 cycles)
  swapw

  # drop the capacity word (4 cycles)
  dropw
end

#! Computs the note inputs commitment for up to 16 inputs
#! Inputs: 
#! INPUTS_1 @ mem_17
#! INPUTS_2 @ mem_16
#! INPUTS_3 @ mem_15
#! INPUTS_4 @ mem_14
proc.get_note_inputs_commitment_mem
    # Initialize the capacity portion of the hasher state.
    padw
    # => [0, 0, 0, 0]

    # Absorb the first 8 values into the hasher state.
    mem_loadw.17 padw mem_loadw.16
    # => [INPUTS_2, INPUTS_1, 0, 0, 0, 0]

    # Execute the RPO permutation.
    hperm
    # => Permuted state [R2, R1, C]

    # Drop the two capacity elements to absorb the 9th element.
    dropw dropw
    # => [R2, R1]

    # Absorb INPUTS_3 & INPUTS_4.
    padw mem_loadw.15 padw mem_loadw.14
    # => [INPUTS_4, INPUTS_3, R2, R1]

    # Execute the RPO permutation.
    hperm
    # => Permuted state [R2, R1, C]

    # Convert the state to the digest.
    exec.state_to_digest
    # => [Digest]
end

# [INPUTS_4, INPUTS_3, INPUTS_2, INPUTS_1]
proc.get_note_inputs_commitment
  # Initialize the capacity portion of the hasher state.
  # Absorb the first 8 values into the hasher state.
  swapdw padw movupw.2 movupw.2
  # => [8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0]

  # Execute the RPO permutation.
  hperm
  # => Permuted state [R2, R1, C]

  # Drop the two capacity elements to absorb the 9th element.
  dropw dropw
  # => [R2, R1]

  # Absorb the 9th element and apply padding.
  movupw.2 movupw.2
  # => [0, 0, 0, 0, 0, 0, 0, 9, R2, R1]

  # Execute the RPO permutation.
  hperm
  # => Permuted state [R2, R1, C]

  # Convert the state to the digest.
  exec.state_to_digest
  # => [Digest]
end

#! Returns the RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and input
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, INPUT_HASH]
#! Outputs: [RECIPIENT]
#!
proc.build_recipient_hash
  padw hmerge
  # => [SERIAL_NUM_HASH, SCRIPT_HASH, INPUT_HASH]

  swapw hmerge
  # => [MERGE_SCRIPT, INPUT_HASH]

  swapw hmerge
  # [RECIPIENT]
end

begin

  push.1.2.3.4.5.6.7.8.9.0.0.0.0.0.0.0

  debug.stack

  exec.get_note_inputs_commitment

  push.2759471287707961087.16916719151911714604.9981200281211272705.14248949638383279509

  push.1.2.3.4

  exec.build_recipient_hash

end
