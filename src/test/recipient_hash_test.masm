
#! Given the hasher state, returns the hash output
#!
#! Input: [C, B, A, ...]
#! Ouptut: [HASH, ...]
#! Where: For the native RPO hasher HASH is B.
#! Cycles: 9
proc.state_to_digest
  # drop the first rate word (4 cycles)
  dropw

  # save the hash result (1 cycles)
  swapw

  # drop the capacity word (4 cycles)
  dropw
end

begin
    # Initialize the capacity portion of the hasher state.
    padw
    # => [0, 0, 0, 0]

    # Absorb the first 8 values into the hasher state.
    push.1.2.3.4.5.6.7.8
    # => [8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0]

    # Execute the RPO permutation.
    hperm
    # => Permuted state [R2, R1, C]

    # Drop the two capacity elements to absorb the 9th element.
    dropw dropw
    # => [R2, R1]

    # Absorb the 9th element and apply padding.
    push.9.0.0.0.0.0.0.0
    # => [0, 0, 0, 0, 0, 0, 10, 9, R2, R1]

    # Execute the RPO permutation.
    hperm
    # => Permuted state [R2, R1, C]

    # Convert the state to the digest.
    exec.state_to_digest
    # => [Digest]
end


