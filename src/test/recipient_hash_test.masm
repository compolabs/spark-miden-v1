
#! Given the hasher state, returns the hash output
#!
#! Input: [C, B, A, ...]
#! Ouptut: [HASH, ...]
#! Where: For the native RPO hasher HASH is B.
#! Cycles: 9
proc.state_to_digest
  # drop the first rate word (4 cycles)
  dropw

  # save the hash result (1 cycles)
  swapw

  # drop the capacity word (4 cycles)
  dropw
end


begin
    # push the capacity portion of the hasher state onto the stack; since the number of elements we are
    # hashing is not divisible by 8, the first capacity register must be set to 1 (this is RPO's padding
    # rule)
    push.1.0.0.0
    # => [0, 0, 0, 1]

    # absorb the first 8 values into the hasher state
    push.1.2.3.4.5.6.7.8
    # => [8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 1]

    # execute the RPO permutation
    hperm
    # => [R2, R1, C]

    # absorb the 9th element into the state; the padding rule is that we need to append 1 followed by the 
    # number of zeros needed to get the state to the next multiple of 8
    dropw dropw
    # => [R2, R1, C]

    push.9.1.0.0.0.0.0.0
    # => [0, 0, 0, 0, 0, 0, 1, 9, C]

    # execute the RPO permutation
    hperm
    # => [R2, R1, C]
    
    exec.state_to_digest
    # => [R1]
end

