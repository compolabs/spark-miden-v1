use.miden::note
use.miden::contracts::wallets::basic->wallet
use.miden::tx
use.miden::account
use.std::sys
use.std::crypto::hashes::native
use.std::math::u64

const.NOT_CREATOR=1

#! Returns the RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and input
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, input]
#! Outputs: [RECIPIENT]
#!
#! Only allows a single input currently  
proc.build_recipient_hash
  padw hmerge
  # => [SERIAL_NUM_HASH, SCRIPT_HASH, input] 

  # merge SERIAL_NUM_HASH and SCRIPT_HASH
  swapw hmerge
  # => [SERIAL_SCRIPT_HASH, input] 

  # compute the INPUT_HASH. Note: only one input is allowed
  swapw swap.3 padw hmerge
  # => [INPUT_HASH, SERIAL_SCRIPT_HASH]

  hmerge
  # [RECIPIENT]
end

#! Returns if the currently consuming account is the creator of the note
#!
#! Inputs: []
#! Outputs: [is_creator]
#!
proc.check_if_consumer_is_creator
  # get consuming account id
  exec.account::get_id

  # P2ID SCRIPT HASH
  push.10602532918680875325.6675127147439709234.18374149518996115046.17430228962309045350

  # serial num
  exec.note::get_serial_number

  exec.build_recipient_hash

  # write inputs to mem drop num inputs & ptr
  push.0 exec.note::get_inputs drop drop

  padw mem_loadw.0
  
  eqw

  swap.8 dropw dropw

end


begin
  dropw
  
  exec.check_if_consumer_is_creator

  if.true
    # get assets in note and give them to owner
    push.0 exec.note::get_assets
    mem_loadw.0
    call.wallet::receive_asset 
    dropw
    push.1 call.account::incr_nonce
    exec.sys::truncate_stack

  else
    assert.err=NOT_CREATOR
    push.333
    debug.stack
    drop
  end

end