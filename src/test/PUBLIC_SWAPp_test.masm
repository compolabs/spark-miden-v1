use.miden::note
use.miden::contracts::wallets::basic->wallet
use.std::sys
use.miden::account

#! Returns the P2ID RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and account_id
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, account_id]
#! Outputs: [P2ID_RECIPIENT]
#!
proc.build_p2id_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_HASH, account_id]

    swapw hmerge
    # => [SERIAL_SCRIPT_HASH, account_id]

    swapw swap.3 padw hmerge
    # => [INPUT_HASH, SERIAL_SCRIPT_HASH]

    hmerge
    # => [P2ID_RECIPIENT]
end

# @dev debug this
# inputs: [creator_id, SWAP_COUNT, TAG, ASSET_REQUESTED_REMAINING, PAYBACK_RECIPIENT]
# ouputs: [SWAP_RECIPIENT]
proc.get_swap_note_inputs_commitment

    mem_store.84
    mem_storew.83 dropw
    mem_storew.82 dropw
    mem_storew.81 dropw
    mem_storew.80 dropw

    push.17.80

    push.303 debug.stack debug.mem.80.84 drop

    exec.note::compute_inputs_hash

end

#! Returns the NOTE RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and INPUT_HASH
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, INPUT_HASH]
#! Outputs: [P2ID_RECIPIENT]
#!
proc.build_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_HASH, INPUT_HASH]

    swapw hmerge
    # => [SERIAL_SCRIPT_HASH, INPUT_HASH]

    swapw hmerge
    # => [P2ID_RECIPIENT]
end

begin
    # => [SCRIPT_HASH]

    mem_storew.10
    # => [SCRIPT_HASH]

    dropw
    # => []

    push.0 exec.note::get_inputs
    # => [num_inputs, dest_ptr]

    drop drop
    # => []

    # get asset & recieve
    push.4 exec.note::get_assets
    mem_loadw.4
    # => [ASSET]

    # @dev 50 in 50 out
    swap.3 drop push.50 swap.3

    push.111
    debug.stack
    drop

    call.wallet::receive_asset
    # => []

    # push.{ACCOUNT_ID}
    mem_load.3
    # push.10376293541461622847
    # => [account_id]

    push.1668143385662437433.10767920840476013014.17141854971706030398.16685164387741191399
    # => [SCRIPT_HASH, account_id]

    push.0.0.0.0
    # => [SERIAL_NUM, SCRIPT_HASH, account_id]

    exec.build_p2id_recipient_hash
    # => [P2ID_RECIPIENT]

    push.1
    # => [execution_hint_always, P2ID_RECIPIENT]

    push.1
    # => [public_note, execution_hint_always, P2ID_RECIPIENT]

    push.0
    # => [aux, public_note, execution_hint_always, P2ID_RECIPIENT]

    push.3863019520
    # => [tag, aux, public_note, execution_hint_always, P2ID_RECIPIENT]
    # => [tag, aux, note_type, execution_hint, RECIPIENT]

    padw
    mem_loadw.0

    push.222
    debug.stack
    drop

    # => [ASSET, tag, aux, note_type, execution_hint, RECIPIENT]
    call.wallet::send_asset
    # => [0, ASSET] @dev ?

    drop dropw
    # => []

    push.0 exec.note::get_inputs
    drop drop

    push.16.0

    exec.note::compute_inputs_hash
    # => [INPUT_COMMITMENT]

    padw mem_loadw.10
    # => [SCRIPT_HASH, INPUT_COMMITMENT]

    push.1.2.3.4
    # => [SERIAL_NUM, SCRIPT_HASH, INPUT_COMMITMENT]

    exec.build_recipient_hash
    # => [SWAPp_RECIPIENT]

    push.1
    # => [execution_hint_always, SWAPp_RECIPIENT]

    push.1
    # => [public_note, execution_hint_always, SWAPp_RECIPIENT]

    push.0
    # => [aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

    push.2147524096
    # => [tag, aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

    push.444 debug.stack drop

    push.4 exec.note::get_assets
    drop drop

    padw mem_loadw.4
    # => [ASSET, tag, aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

    # @dev 50 in 50 out
    swap.3 drop push.50 swap.3

    push.555
    debug.stack
    drop

    dupw call.wallet::receive_asset dropw

    # => [ASSET, tag, aux, note_type, execution_hint, RECIPIENT]
    call.wallet::send_asset

    push.666
    debug.stack
    drop

    # commented out to speed up test
    # tx passes if uncommented
    exec.sys::truncate_stack
    # => []
end
